=== COMPARACIÓN PARA StyleKAndRValidator.java ===

--- VERSIÓN ANTIGUA ---
[ORIGINAL] package mantenimiento.codecounter.validators.format_validators;
[ORIGINAL] 
[SPLITED] import static
[ORIGINAL] mantenimiento.codecounter.constants.ReasonInvalidFormat.INVALID_STYLE_K_AND_R;
[ORIGINAL] 
[ORIGINAL] import mantenimiento.codecounter.exceptions.InvalidFormatException;
[ORIGINAL] import mantenimiento.codecounter.templates.FormatValidator;
[ORIGINAL] 
[ORIGINAL] /** Clase que valida si se cumple el formato de uso de llaves K&R */
[ORIGINAL] public class StyleKAndRValidator extends FormatValidator {
[ORIGINAL] 
[ORIGINAL] private static final String INVALID_OPENING_BRACKED_REGEX = "^\\s*\\{\\s*";
[ORIGINAL] private static final String VALID_CLOSING_BRACKED_REGEX =
[ORIGINAL] "((\\s*\\}\\s*)|(\\s*\\}\\s*(while|else|catch|finally|\\)?;).*))";
[ORIGINAL] private static final String EMPTY_BRACKED_REGEX = "^\\s*\\{.*\\}\\s*";
[ORIGINAL] 
[ORIGINAL] /**
[SPLITED] * Realiza la validacion del formato verificando si se cumple el estilo de
[ORIGINAL] bloques K&R
[ORIGINAL] *
[ORIGINAL] * @param lineOfFile linea de texto (sentencia de codigo) a validar
[SPLITED] * @return {@code true} si se satisface el estilo de bloques K&R {@code false} en
[ORIGINAL] caso contrario
[ORIGINAL] * @throws InvalidFormatException si no se cumple estilo de bloque K&R
[ORIGINAL] */
[ORIGINAL] @Override
[ORIGINAL] public boolean isValid(String lineOfFile) throws InvalidFormatException {
[ORIGINAL] if (isInValidOpeningBracked(lineOfFile)
[ORIGINAL] || isInvalidClosingBracked(lineOfFile)
[ORIGINAL] || isEmptyBracked(lineOfFile)) {
[ORIGINAL] throw new InvalidFormatException(INVALID_STYLE_K_AND_R, lineOfFile);
[ORIGINAL] }
[ORIGINAL] return validateNext(lineOfFile);
[ORIGINAL] }
[ORIGINAL] 
[ORIGINAL] /**
[ORIGINAL] * Verifica si la línea del archivo contiene un corchete de apertura no válido.
[ORIGINAL] *
[ORIGINAL] * @param lineOfFile Línea del archivo a evaluar.
[SPLITED] * @return {@code true} si la línea coincide con el patrón de corchete de
[ORIGINAL] apertura no válido,
[ORIGINAL] *     {@code false} en caso contrario.
[ORIGINAL] */
[ORIGINAL] private boolean isInValidOpeningBracked(String lineOfFile) {
[ORIGINAL] return lineOfFile.matches(INVALID_OPENING_BRACKED_REGEX);
[ORIGINAL] }
[ORIGINAL] 
[ORIGINAL] /**
[ORIGINAL] * Verifica si la línea del archivo contiene un corchete de cierre no válido.
[ORIGINAL] *
[ORIGINAL] * @param lineOfFile Línea del archivo a evaluar.
[SPLITED] * @return {@code true} si la línea coincide con el patrón de corchete de cierre
[ORIGINAL] no válido, {@code
[ORIGINAL] *     false} en caso contrario.
[ORIGINAL] */
[ORIGINAL] private boolean isInvalidClosingBracked(String lineOfFile) {
[ORIGINAL] 
[ORIGINAL] return (lineOfFile.startsWith("}") || lineOfFile.endsWith("}"))
[ORIGINAL] && !lineOfFile.matches(VALID_CLOSING_BRACKED_REGEX);
[ORIGINAL] }
[ORIGINAL] 
[ORIGINAL] /**
[ORIGINAL] * Verifica si la línea del archivo contiene un par de corchetes vacío.
[ORIGINAL] *
[ORIGINAL] * @param lineOfFile Línea del archivo a evaluar.
[SPLITED] * @return {@code true} si la línea coincide con el patrón de corchetes vacíos,
[ORIGINAL] {@code false} en
[ORIGINAL] *     caso contrario.
[ORIGINAL] */
[ORIGINAL] private boolean isEmptyBracked(String lineOfFile) {
[ORIGINAL] return lineOfFile.matches(EMPTY_BRACKED_REGEX);
[ORIGINAL] }
[ORIGINAL] }

--- VERSIÓN NUEVA ---
[ORIGINAL] package mantenimiento.codecounter.validators.format_validators;
[ORIGINAL] 
[SPLITED] import static
[ORIGINAL] mantenimiento.codecounter.constants.ReasonInvalidFormat.INVALID_STYLE_K_AND_R;
[ORIGINAL] 
[ORIGINAL] import mantenimiento.codecounter.exceptions.InvalidFormatException;
[ORIGINAL] import mantenimiento.codecounter.templates.FormatValidator;
[ORIGINAL] 
[ORIGINAL] /** Clase que valida si se cumple el formato de uso de llaves K&R */
[ORIGINAL] public class StyleKAndRValidator extends FormatValidator {
[ORIGINAL] 
[ORIGINAL] private static final String INVALID_OPENING_BRACKED_REGEX = "^\\s*\\{\\s*";
[ORIGINAL] private static final String VALID_CLOSING_BRACKED_REGEX =
[ORIGINAL] "((\\s*\\}\\s*)|(\\s*\\}\\s*(while|else|catch|finally|\\)?;).*))";
[ORIGINAL] private static final String EMPTY_BRACKED_REGEX = "^\\s*\\{.*\\}\\s*";
[ORIGINAL] 
[ORIGINAL] /**
[SPLITED] * Realiza la validacion del formato verificando si se cumple el estilo de
[ORIGINAL] bloques K&R
[ORIGINAL] *
[ORIGINAL] * @param lineOfFile linea de texto (sentencia de codigo) a validar
[SPLITED] * @return {@code true} si se satisface el estilo de bloques K&R {@code false} en
[ORIGINAL] caso contrario
[ORIGINAL] * @throws InvalidFormatException si no se cumple estilo de bloque K&R
[ORIGINAL] */
[ORIGINAL] @Override
[ORIGINAL] public boolean isValid(String lineOfFile) throws InvalidFormatException {
[ORIGINAL] if (isInValidOpeningBracked(lineOfFile)
[ORIGINAL] || isInvalidClosingBracked(lineOfFile)
[ORIGINAL] || isEmptyBracked(lineOfFile)) {
[ORIGINAL] throw new InvalidFormatException(INVALID_STYLE_K_AND_R, lineOfFile);
[ORIGINAL] }
[ORIGINAL] return validateNext(lineOfFile);
[ORIGINAL] }
[ORIGINAL] 
[ORIGINAL] /**
[ORIGINAL] * Verifica si la línea del archivo contiene un corchete de apertura no válido.
[ORIGINAL] *
[ORIGINAL] * @param lineOfFile Línea del archivo a evaluar.
[SPLITED] * @return {@code true} si la línea coincide con el patrón de corchete de
[ORIGINAL] apertura no válido,
[ORIGINAL] *     {@code false} en caso contrario.
[ORIGINAL] */
[ORIGINAL] private boolean isInValidOpeningBracked(String lineOfFile) {
[ORIGINAL] return lineOfFile.matches(INVALID_OPENING_BRACKED_REGEX);
[ORIGINAL] }
[ORIGINAL] 
[ORIGINAL] /**
[ORIGINAL] * Verifica si la línea del archivo contiene un corchete de cierre no válido.
[ORIGINAL] *
[ORIGINAL] * @param lineOfFile Línea del archivo a evaluar.
[SPLITED] * @return {@code true} si la línea coincide con el patrón de corchete de cierre
[ORIGINAL] no válido, {@code
[ORIGINAL] *     false} en caso contrario.
[ORIGINAL] */
[ORIGINAL] private boolean isInvalidClosingBracked(String lineOfFile) {
[ORIGINAL] 
[ORIGINAL] return (lineOfFile.startsWith("}") || lineOfFile.endsWith("}"))
[ORIGINAL] && !lineOfFile.matches(VALID_CLOSING_BRACKED_REGEX);
[ORIGINAL] }
[ORIGINAL] 
[ORIGINAL] /**
[ORIGINAL] * Verifica si la línea del archivo contiene un par de corchetes vacío.
[ORIGINAL] *
[ORIGINAL] * @param lineOfFile Línea del archivo a evaluar.
[SPLITED] * @return {@code true} si la línea coincide con el patrón de corchetes vacíos,
[ORIGINAL] {@code false} en
[ORIGINAL] *     caso contrario.
[ORIGINAL] */
[ORIGINAL] private boolean isEmptyBracked(String lineOfFile) {
[ORIGINAL] return lineOfFile.matches(EMPTY_BRACKED_REGEX);
[ORIGINAL] }
[ORIGINAL] }

