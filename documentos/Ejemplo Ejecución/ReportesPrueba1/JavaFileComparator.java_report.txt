=== ARCHIVO JavaFileComparator.java [Version: B] ===

[NEW] package mantenimiento.codecounter.models.comparators;
[NEW] 
[NEW] import java.util.List;
[NEW] import mantenimiento.codecounter.models.reporters.ComparationReport;
[NEW] 
[NEW] /**
[NEW] * Compara el contenido de dos archivos con la extención .java
[NEW] * Sirve como clase intermedia para incorporar la lógica de comparación de
[NEW] * dos contenidos y la elaboración del reporte.
[NEW] */
[NEW] public class JavaFileComparator {
[NEW] 
[NEW] private ComparationReport comparationReport;
[NEW] private List<String> content;
[NEW] private List<String> contentToCompare;
[NEW] 
[NEW] /**
[NEW] * Constructor
[NEW] * @param content contenido de un archivo con extensión .java
[NEW] * @param contentToCompare contenido de un archivo .java para comparar
[NEW] */
[NEW] public JavaFileComparator(List<String> content, List<String> contentToCompare) {
[NEW] this.comparationReport = new ComparationReport();
[NEW] this.content = content;
[NEW] this.contentToCompare = contentToCompare;
[NEW] }
[NEW] 
[NEW] /**
[NEW] * Compara el contenido de ambos archivos
[NEW] */
[NEW] public void compareContent() {
[NEW] compareSameLines();
[NEW] compareDifferentLines();
[NEW] }
[NEW] 
[NEW] /**
[NEW] * Ejecuta la lógica de comparación de dos líneas provistas como parámetros
[NEW] * y añade una nueva entrada al reporte de comparación
[NEW] * @param line línea de código a comparar
[NEW] * @param lineToCompare línea de código para comparar
[NEW] */
[NEW] private void compareLine(String line, String lineToCompare) {
[NEW] LineComparator lineComparator = new LineComparator(line, lineToCompare);
[NEW] Status status = lineComparator.compare();
[NEW] this.comparationReport.makeReportLine(status, line, lineToCompare);
[NEW] }
[NEW] 
[NEW] /**
[SPLITED] * Compara aquellas líneas de código en ambos contenidos que compartan el mismo
[NEW] índice
[NEW] */
[NEW] private void compareSameLines() {
[SPLITED] for (int i = 0, j = 0; i < content.size() && j < contentToCompare.size(); i++,
[NEW] j++) {
[NEW] String currentLine = content.get(i);
[NEW] String lineToCompare = contentToCompare.get(j);
[NEW] compareLine(currentLine, lineToCompare);
[NEW] }
[NEW] }
[NEW] 
[NEW] 
[NEW] /**
[SPLITED] * Genera un reporte de comparación de aquellas líneas que no se encuentren en un
[NEW] contenido u
[SPLITED] * otro a razón de que tener una mayor extensión. Dichos reportes empiezan a
[NEW] partir del índice
[NEW] * del contenido con menos longitud.
[NEW] */
[NEW] private void compareDifferentLines() {
[NEW] int difference = Math.abs(this.content.size() - this.contentToCompare.size());
[NEW] if (this.content.size() < this.contentToCompare.size()) {
[SPLITED] this.comparationReport.updateReport(this.content, this.contentToCompare,
[NEW] difference);
[NEW] } else if (this.content.size() > this.contentToCompare.size()) {
[NEW] this.comparationReport.updateReport(this.content, difference);
[NEW] }
[NEW] }
[NEW] 
[NEW] /**
[SPLITED] * Método que retorna el reporte final de los contenidos del archivo java en
[NEW] cuestión
[NEW] * @return Retorna el reporte de cada línea de código de ambos contenidos
[NEW] */
[NEW] public ComparationReport getComparationReport() {
[NEW] return comparationReport;
[NEW] }
[NEW] }
