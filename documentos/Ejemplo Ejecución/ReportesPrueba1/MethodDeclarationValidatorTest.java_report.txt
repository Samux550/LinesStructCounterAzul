=== COMPARACIÓN PARA MethodDeclarationValidatorTest.java ===

--- VERSIÓN ANTIGUA ---
[ORIGINAL] package mantenimiento.codecounter.validators.logical_validators;
[ORIGINAL] 
[ORIGINAL] import static org.junit.jupiter.api.Assertions.assertFalse;
[ORIGINAL] import static org.junit.jupiter.api.Assertions.assertTrue;
[ORIGINAL] 
[ORIGINAL] import org.junit.jupiter.api.BeforeEach;
[ORIGINAL] import org.junit.jupiter.api.DisplayName;
[ORIGINAL] import org.junit.jupiter.api.Test;
[ORIGINAL] 
[ORIGINAL] class MethodDeclarationValidatorTest {
[ORIGINAL] 
[ORIGINAL] private MethodDeclarationValidator validator;
[ORIGINAL] 
[ORIGINAL] @BeforeEach
[ORIGINAL] void setUp() {
[ORIGINAL] validator = new MethodDeclarationValidator();
[ORIGINAL] }
[ORIGINAL] 
[ORIGINAL] @Test
[ORIGINAL] @DisplayName("Debe retornar true para una declaración de método válida")
[ORIGINAL] void testValidateType_ValidMethodDeclaration() {
[ORIGINAL] String validMethod = "public static void main(String[] args)";
[ORIGINAL] assertTrue(
[SPLITED] validator.validateType(validMethod), "Should return true for a valid method
[ORIGINAL] declaration");
[ORIGINAL] }
[ORIGINAL] 
[ORIGINAL] @Test
[SPLITED] @DisplayName("Debe retornar true para una declaración de método válida sin
[ORIGINAL] modificadores")
[ORIGINAL] void testValidateType_ValidMethodWithoutModifiers() {
[ORIGINAL] String validMethod = "void doSomething()";
[ORIGINAL] assertTrue(
[ORIGINAL] validator.validateType(validMethod),
[ORIGINAL] "Should return true for a valid method declaration without modifiers");
[ORIGINAL] }
[ORIGINAL] 
[ORIGINAL] @Test
[SPLITED] @DisplayName("Debe retornar false para una declaración de método con punto y
[ORIGINAL] coma")
[ORIGINAL] void testValidateType_InvalidMethodWithSemicolon() {
[ORIGINAL] String invalidMethod = "public void doSomething();";
[ORIGINAL] assertFalse(
[ORIGINAL] validator.validateType(invalidMethod),
[ORIGINAL] "Should return false for a method declaration with a semicolon");
[ORIGINAL] }
[ORIGINAL] 
[ORIGINAL] @Test
[SPLITED] @DisplayName("Debe retornar false para una línea de código que no es una
[ORIGINAL] declaración de método")
[ORIGINAL] void testValidateType_InvalidLineOfCode() {
[ORIGINAL] String invalidCode = "int x = 0;";
[ORIGINAL] assertFalse(
[ORIGINAL] validator.validateType(invalidCode),
[ORIGINAL] "Should return false for a non-method declaration line of code");
[ORIGINAL] }
[ORIGINAL] 
[ORIGINAL] @Test
[ORIGINAL] @DisplayName("Debe retornar false para una línea vacía")
[ORIGINAL] void testValidateType_EmptyLine() {
[ORIGINAL] String emptyLine = "";
[SPLITED] assertFalse(validator.validateType(emptyLine), "Should return false for an empty
[ORIGINAL] line");
[ORIGINAL] }
[ORIGINAL] 
[ORIGINAL] @Test
[ORIGINAL] @DisplayName("Debe retornar false para una línea con solo espacios en blanco")
[ORIGINAL] void testValidateType_WhitespaceOnly() {
[ORIGINAL] String whitespaceOnly = "   ";
[ORIGINAL] assertFalse(
[ORIGINAL] validator.validateType(whitespaceOnly),
[ORIGINAL] "Should return false for a line with only whitespace");
[ORIGINAL] }
[ORIGINAL] 
[ORIGINAL] @Test
[SPLITED] @DisplayName("Debe retornar false para una declaración de método sin
[ORIGINAL] paréntesis")
[ORIGINAL] void testValidateType_InvalidMethodWithoutParentheses() {
[ORIGINAL] String invalidMethod = "public void doSomething";
[ORIGINAL] assertFalse(
[ORIGINAL] validator.validateType(invalidMethod),
[ORIGINAL] "Should return false for a method declaration without parentheses");
[ORIGINAL] }
[ORIGINAL] }

--- VERSIÓN NUEVA ---
[ORIGINAL] package mantenimiento.codecounter.validators.logical_validators;
[ORIGINAL] 
[ORIGINAL] import static org.junit.jupiter.api.Assertions.assertFalse;
[ORIGINAL] import static org.junit.jupiter.api.Assertions.assertTrue;
[ORIGINAL] 
[ORIGINAL] import org.junit.jupiter.api.BeforeEach;
[ORIGINAL] import org.junit.jupiter.api.DisplayName;
[ORIGINAL] import org.junit.jupiter.api.Test;
[ORIGINAL] 
[ORIGINAL] class MethodDeclarationValidatorTest {
[ORIGINAL] 
[ORIGINAL] private MethodDeclarationValidator validator;
[ORIGINAL] 
[ORIGINAL] @BeforeEach
[ORIGINAL] void setUp() {
[ORIGINAL] validator = new MethodDeclarationValidator();
[ORIGINAL] }
[ORIGINAL] 
[ORIGINAL] @Test
[ORIGINAL] @DisplayName("Debe retornar true para una declaración de método válida")
[ORIGINAL] void testValidateType_ValidMethodDeclaration() {
[ORIGINAL] String validMethod = "public static void main(String[] args)";
[ORIGINAL] assertTrue(
[SPLITED] validator.validateType(validMethod), "Should return true for a valid method
[ORIGINAL] declaration");
[ORIGINAL] }
[ORIGINAL] 
[ORIGINAL] @Test
[SPLITED] @DisplayName("Debe retornar true para una declaración de método válida sin
[ORIGINAL] modificadores")
[ORIGINAL] void testValidateType_ValidMethodWithoutModifiers() {
[ORIGINAL] String validMethod = "void doSomething()";
[ORIGINAL] assertTrue(
[ORIGINAL] validator.validateType(validMethod),
[ORIGINAL] "Should return true for a valid method declaration without modifiers");
[ORIGINAL] }
[ORIGINAL] 
[ORIGINAL] @Test
[SPLITED] @DisplayName("Debe retornar false para una declaración de método con punto y
[ORIGINAL] coma")
[ORIGINAL] void testValidateType_InvalidMethodWithSemicolon() {
[ORIGINAL] String invalidMethod = "public void doSomething();";
[ORIGINAL] assertFalse(
[ORIGINAL] validator.validateType(invalidMethod),
[ORIGINAL] "Should return false for a method declaration with a semicolon");
[ORIGINAL] }
[ORIGINAL] 
[ORIGINAL] @Test
[SPLITED] @DisplayName("Debe retornar false para una línea de código que no es una
[ORIGINAL] declaración de método")
[ORIGINAL] void testValidateType_InvalidLineOfCode() {
[ORIGINAL] String invalidCode = "int x = 0;";
[ORIGINAL] assertFalse(
[ORIGINAL] validator.validateType(invalidCode),
[ORIGINAL] "Should return false for a non-method declaration line of code");
[ORIGINAL] }
[ORIGINAL] 
[ORIGINAL] @Test
[ORIGINAL] @DisplayName("Debe retornar false para una línea vacía")
[ORIGINAL] void testValidateType_EmptyLine() {
[ORIGINAL] String emptyLine = "";
[SPLITED] assertFalse(validator.validateType(emptyLine), "Should return false for an empty
[ORIGINAL] line");
[ORIGINAL] }
[ORIGINAL] 
[ORIGINAL] @Test
[ORIGINAL] @DisplayName("Debe retornar false para una línea con solo espacios en blanco")
[ORIGINAL] void testValidateType_WhitespaceOnly() {
[ORIGINAL] String whitespaceOnly = "   ";
[ORIGINAL] assertFalse(
[ORIGINAL] validator.validateType(whitespaceOnly),
[ORIGINAL] "Should return false for a line with only whitespace");
[ORIGINAL] }
[ORIGINAL] 
[ORIGINAL] @Test
[SPLITED] @DisplayName("Debe retornar false para una declaración de método sin
[ORIGINAL] paréntesis")
[ORIGINAL] void testValidateType_InvalidMethodWithoutParentheses() {
[ORIGINAL] String invalidMethod = "public void doSomething";
[ORIGINAL] assertFalse(
[ORIGINAL] validator.validateType(invalidMethod),
[ORIGINAL] "Should return false for a method declaration without parentheses");
[ORIGINAL] }
[ORIGINAL] }

